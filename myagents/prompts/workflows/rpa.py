RPA_CHECK_PROMPT = """
# 🔄 **当前关键阶段**：`任务拆解阶段检查阶段`  
**阶段核心使命**：  
▢ 检查当前任务是否已经按照蓝图进行了拆解  

## 阶段专属约束（强制遵守）
1. **全局规划核对责任**  
   ✓ 核对拆解子任务的层级是否和蓝图一致(层数不是叶子节点的数量，而是层次遍历任务树的深度)
   ✓ 核对每个子任务中的描述/是否叶子/子任务是否和蓝图一致
   ✓ 核对每个子任务是否被修改，有没有多了或者少了子任务，或者有没有修改了子任务的属性
   ⛔ 如果有任何的问题你没有指出，那么你将会被惩罚。要注意，你的检查结果都会交由人工审核，所以你不能有任何的遗漏。

## ▣ 阶段专属输出格式
<think>
你认为当前任务是否已经按照蓝图进行了拆解，你的思考写在这里，禁止⛔直接回答问题，你只能思考和规划一步步应该怎么做。
</think>
<checklist>
- [ ] 检查每个子任务的描述/是否叶子/子任务是否和蓝图一致
- [ ] 检查每个子任务是否被修改，有没有多了或者少了子任务，或者有没有修改了子任务的属性
- [ ] 检查拆解子任务的层级以及树结构是否和蓝图一致
- [ ] 是否有直接回答问题等严重违反规定的行为
</checklist>
<reflection>
问题点1：...
问题点2：...
如果还有更多的问题，请继续补充`问题点x`，如果没有则不需要填写这部分...
</reflection>
<action>
如果你发现了错误，你一定要及时取消任务。
</action>
<finish_flag>
如果你任务当前任务已经正确按照蓝图进行了拆解，那么请输出 True，否则输出 False。
</finish_flag>
你的最终 outputs 写在这里

## 🔧 可用工具
{tools}

## 🌐 任务上下文信息（动态注入）
你当前观察到的父任务信息为：
{task_context}
"""


RPA_PLAN_PROMPT = """
# 🔄 **当前关键阶段**：`分层任务编排设计阶段`
**阶段核心使命**：
▢ 创建完整的任务层级结构蓝图
▢ 定义每个子任务的信息需求
▢ 标记叶子节点任务（最终执行层）

## ⚠ 阶段任务目标（人工审查点，如若出错，你将会被惩罚）
1. **全局规划责任**
   ✓ 本阶段必须完成**整个任务树**的顶层设计
   ✓ 需预见所有潜在子任务层级
   ✓ 你可以看看自己都有什么工具可以用，这些工具可以帮你完成任务。
   ✓ 将你规划的蓝图及时填入<orchestration>标签中，不要遗漏，规划必须符合格式。
  ⛔ 严令禁止直接回答任务，你只能思考和规划一步步应该怎么做。

2. **叶子节点标识规则**  
   ✓ `Is Leaf=True` 仅当任务**不再可分**且**可直接执行**
   ✓ 非叶子任务必须包含`Sub-Tasks`属性
   
## 🌰 阶段标准示例
假设当前需要规划拆解的任务为：DeepWiki-Open 产品竞品分析

你的输出格式应该如下：
<think>
你认为应该怎样处理当前的任务，你的思考写在这里
</think>
<orchestration>
- [ ] DeepWiki-Open产品竞品分析总任务
    - 描述：全面调研DeepWiki-Open类知识管理和AI协作平台的竞争对手情况，包括开源知识库、AI文档助手、团队协作工具等维度的竞品分析，通过系统性的数据收集和分析，形成可执行的竞争策略建议。核心产出：包含详细竞品分析报告的文档，报告应包含SWOT分析、功能对比矩阵、技术架构分析、用户满意度分析、市场机会识别等内容。校验标准：报告内容完整度≥90%，数据来源≥3个权威渠道，分析结论可操作性强，包含明确的行动建议。
    - 是否叶子：False  // 非叶子任务，需要继续拆解
    - 子任务：
        - [ ] 确定竞品范围
            - 描述：通过市场调研和数据分析，确定知识管理和AI协作领域最具代表性和威胁性的竞争对手，包括开源项目、商业产品、企业级解决方案等，建立科学的竞品筛选标准。核心产出：包含行业TOP10竞品名单的文档，名单应包含项目/产品基本信息、技术栈、目标用户群体、商业模式、活跃度等关键信息。校验标准：竞品名单覆盖市场份额≥85%，包含开源和商业产品，每个竞品信息完整度≥90%。
            - 是否叶子：False  // 非叶子任务，需要继续拆解
            - 子任务：
                - [ ] 收集开源项目数据
                    - 描述：从GitHub、GitLab、SourceForge等平台获取开源知识管理项目的Star数、Fork数、贡献者数量、更新频率等活跃度指标，识别最受欢迎的开源竞品。核心产出：包含开源项目数据的文档，数据应包含项目活跃度、技术栈、社区规模、更新频率、许可证类型等关键指标。校验标准：数据来源≥3个开源平台，数据时效性≤1个月，项目数量≥20个，包含历史趋势分析。
                    - 是否叶子：True
                - [ ] 调研商业产品市场
                    - 描述：通过行业报告、用户调研、搜索热度分析等方式，识别用户最关注和使用的商业知识管理产品，了解用户真实需求和偏好。核心产出：包含商业产品调研的文档，应包含产品热度排名、用户讨论话题、功能偏好分析、用户画像等维度。校验标准：调研产品≥15个，样本量≥5000条讨论，用户画像分析准确率≥85%，包含功能需求分析。
                    - 是否叶子：True
        
        - [ ] 技术架构对比
            - 描述：深入分析竞品的技术架构、技术栈选择、部署方式、扩展性等，建立标准化的技术对比框架，识别技术优势和差距。核心产出：包含技术架构对比的文档，清单应包含技术栈、架构模式、部署方式、性能指标、扩展性评估等维度。校验标准：技术对比维度≥8个，性能测试数据≥5个指标，架构分析准确率≥90%，包含技术选型建议。
            - 是否叶子：False  // 非叶子任务，需要继续拆解
            - 子任务：
                - [ ] 分析技术栈组成
                    - 描述：系统性地收集竞品的前端技术、后端技术、数据库选择、AI模型集成、API设计等技术栈信息，建立客观的技术对比基准。核心产出：包含技术栈分析的文档，参数应包含前端框架、后端语言、数据库类型、AI集成方式、API规范等。校验标准：技术栈信息完整性≥95%，数据来源≥2个官方渠道，包含技术选型分析，技术趋势预测准确率≥80%。
                    - 是否叶子：True
                - [ ] 评估性能表现
                    - 描述：通过实际测试和基准测试，记录竞品的响应速度、并发处理能力、存储效率、AI推理速度等性能指标。核心产出：包含性能评估的文档，应包含性能测试结果、基准对比、性能瓶颈分析、优化建议等。校验标准：测试指标≥10个，测试环境标准化，性能数据准确性≥95%，包含性能优化建议。
                    - 是否叶子：True
        
        - [ ] 功能特性分析
            - 描述：全面分析竞品的核心功能特性，包括文档管理、AI助手、协作功能、集成能力等，识别功能差异化优势和功能差距。核心产出：包含功能特性分析的文档，数据应包含功能覆盖度、用户体验评分、创新功能识别、功能成熟度评估等。校验标准：功能分析覆盖度≥95%，用户体验评分样本≥200人，功能对比维度≥10个，创新功能识别准确率≥85%。
            - 是否叶子：False  // 非叶子任务，需要继续拆解
            - 子任务：
                - [ ] 对比核心功能
                    - 描述：从竞品官方网站、文档、演示视频等渠道获取核心功能信息，建立标准化的功能对比矩阵。核心产出：包含核心功能对比的文档，应包含文档编辑、版本控制、AI助手、搜索功能、协作工具等对比。校验标准：功能对比项≥15个，数据来源≥3个官方渠道，功能描述准确性≥90%，包含功能重要性评级。
                    - 是否叶子：True
                - [ ] 测试AI能力
                    - 描述：通过实际使用和体验竞品的AI功能，记录AI助手的响应质量、理解能力、生成效果、学习能力等表现。核心产出：包含AI能力测试的文档，应包含AI功能评分、响应质量分析、使用场景测试、AI模型对比等。校验标准：AI功能测试≥8个场景，测试时长≥5小时/产品，AI评分标准统一，包含AI能力对比分析。
                    - 是否叶子：True
        
        - [ ] 商业模式分析
            - 描述：分析竞品的商业模式、定价策略、盈利方式、目标市场等，识别商业模式的可行性和竞争优势。核心产出：包含商业模式分析的文档，数据应包含定价模式、收入来源、目标用户、市场定位、商业模式创新等。校验标准：商业模式分析完整度≥90%，定价数据覆盖≥8个主要产品，市场定位分析准确率≥85%，包含商业模式建议。
            - 是否叶子：False  // 非叶子任务，需要继续拆解
            - 子任务：
                - [ ] 调研定价策略
                    - 描述：从竞品官方网站、应用商店、授权经销商等渠道获取定价信息，分析不同产品的定价策略和价格定位。核心产出：包含定价策略调研的文档，应包含免费版功能、付费版价格、企业版定价、增值服务等。校验标准：价格来源≥3个官方渠道，定价数据一致性≥95%，包含定价策略分析，价格竞争力评估。
                    - 是否叶子：True
                - [ ] 分析用户群体
                    - 描述：通过用户调研、市场报告、社交媒体分析等方式，了解竞品的目标用户群体、用户需求、使用场景等。核心产出：包含用户群体分析的文档，应包含用户画像、使用场景、需求分析、用户满意度等。校验标准：用户调研样本≥1000人，用户画像准确率≥85%，需求分析完整度≥90%，包含用户行为分析。
                    - 是否叶子：True
        
        - [ ] 社区生态评估
            - 描述：评估竞品的社区活跃度、生态系统建设、第三方集成、开发者支持等，了解产品的生态发展状况。核心产出：包含社区生态评估的文档，应包含社区活跃度、插件生态、API集成、开发者工具、生态合作伙伴等。校验标准：生态评估维度≥6个，数据时效性≤3个月，生态活跃度评分准确率≥90%，包含生态发展建议。
            - 是否叶子：False  // 非叶子任务，需要继续拆解
            - 子任务：
                - [ ] 分析社区活跃度
                    - 描述：从GitHub、论坛、社交媒体等平台收集社区活跃度数据，分析用户参与度、问题解决速度、内容更新频率等。核心产出：包含社区活跃度分析的文档，应包含社区规模、活跃用户数、内容更新频率、问题响应速度等。校验标准：监测平台≥4个，数据量≥3000条，活跃度分析准确率≥85%，包含社区发展趋势分析。
                    - 是否叶子：True
                - [ ] 调研插件生态
                    - 描述：调研竞品的插件市场、第三方集成、API生态等，了解产品的扩展性和生态系统建设情况。核心产出：包含插件生态调研的文档，应包含插件数量、质量评分、API文档质量、集成案例等。校验标准：插件调研数量≥50个，API文档评估准确率≥90%，集成案例≥20个，包含生态建设建议。
                    - 是否叶子：True
        
        - [ ] 生成分析报告
            - 描述：整合所有收集的数据和分析结果，形成结构化的DeepWiki-Open竞品分析报告，提供可执行的竞争策略建议和产品优化方向。核心产出：包含竞品分析报告的文档，报告应包含执行摘要、市场分析、技术对比、功能分析、商业模式、生态评估、SWOT分析、策略建议等章节。校验标准：报告结构完整度≥95%，数据支撑充分度≥90%，建议可操作性≥85%，报告专业度评分≥4.0/5.0。
            - 是否叶子：False  // 非叶子任务，需要继续拆解
            - 子任务：
                - [ ] 制作对比图表
                    - 描述：将收集的数据进行可视化处理，制作技术栈对比图、功能矩阵图、性能雷达图、生态对比图等，提升报告的可读性。核心产出：包含竞品分析报告的文档，图表应包含技术栈对比、功能特性矩阵、性能基准对比、生态活跃度分析、SWOT分析图等。校验标准：图表类型≥6种，数据准确性≥95%，图表美观度评分≥4.0/5.0，包含交互式图表，图表说明完整度≥90%。
                    - 是否叶子：True // 最终叶子任务
                - [ ] 编写SWOT分析
                    - 描述：基于收集的数据和分析结果，从优势、劣势、机会、威胁四个维度进行系统性分析，生成针对DeepWiki-Open的战略建议。核心产出：包含竞品分析报告的文档，SWOT分析应包含详细的技术优势劣势分析、市场机会识别、潜在威胁评估、差异化策略建议等。校验标准：SWOT分析完整度≥95%，建议可操作性≥90%，风险评估准确率≥85%，包含优先级排序，建议实施时间表。
                    - 是否叶子：True // 最终叶子任务
</orchestration>
以上是一个划分成了 **4 层的任务树**，你可以参考这个示例，但是你不需要完全按照这个示例来，你可以根据自己的理解来划分任务树。

## ▣ 阶段专属输出格式
<think>
# 规划思考
如果你把你得规划蓝图写在这里将会被视为错误，你会收到警告。
⛔这里严令禁止直接回答问题，你只能思考这个问题的关键点是什么。
</think>
<orchestration>
# 分层任务蓝图（阶段核心产出）⭐⭐⭐[[注意]]：你只能在这里写规划蓝图，不要写其他内容。
分析任务分解逻辑和层级设计依据，禁止⛔直接回答问题。
- [ ] 任务名称
    - 描述：**必须明确**本任务需要的信息
    - 是否叶子：True/False（严格遵循叶子定义）
    - 子任务：（仅当非叶子时存在）
        - [ ] 子任务名称
            - 描述：... 
            - 是否叶子：...
            - 子任务：...（可多层嵌套）
</orchestration>

## 规划层级限制
对于这个任务，你最多可以拆解到 {detail_level} 层（层指的是层次遍历任务树的层数，如果用户要求的层数越高，则你需要越详细规划）。超出这个层级的拆解将会被视为错误。
【注意】如果最多可以拆解的层数是 1 层，那么你应该直接修改当前任务，而不是拆解任务，并输出修改后的TODO，这会直接覆盖原始任务。

## 🌐 任务上下文信息（动态注入）
你当前观察到的父任务信息为：
{task_context}
"""
