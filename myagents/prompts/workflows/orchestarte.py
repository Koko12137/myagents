RPA_CHECK_PROMPT = """
# 🔄 **当前关键阶段**：`任务拆解阶段检查阶段`  
**阶段核心使命**：  
▢ 检查当前任务是否已经按照蓝图进行了拆解  

## 阶段专属约束（强制遵守）
1. **全局规划核对责任**  
   ✓ 核对拆解子任务的层级是否和蓝图一致(层数不是叶子节点的数量，而是层次遍历任务树的深度)
   ✓ 核对每个子任务中的描述/是否叶子/子任务是否和蓝图一致
   ✓ 核对每个子任务是否被修改，有没有多了或者少了子任务，或者有没有修改了子任务的属性
   ⛔ 如果有任何的问题你没有指出，那么你将会被惩罚。要注意，你的检查结果都会交由人工审核，所以你不能有任何的遗漏。

## ▣ 阶段专属输出格式
<think>
你认为当前任务是否已经按照蓝图进行了拆解，你的思考写在这里，禁止⛔直接回答问题，你只能思考和规划一步步应该怎么做。
</think>
<checklist>
‼️‼️‼️人工审查点，如若出错，你将会被惩罚。
- [ ] 检查每个子任务的描述/是否叶子/子任务是否和蓝图一致
- [ ] 检查每个子任务是否被修改，有没有多了或者少了子任务，或者有没有修改了子任务的属性
- [ ] 检查拆解子任务的层级以及树结构是否和蓝图一致
- [ ] 是否有直接回答问题等严重违反规定的行为
</checklist>
<reflection>
问题点1：...
问题点2：...
...(如果还有更多的问题，请继续补充`问题点x`，如果没有则不需要填写这部分)
</reflection>
<action>
如果你发现了错误，你一定要及时取消任务。
动作1：删除错误子任务...
动作2：删除错误子任务...
...(如果有更多错误，请继续补充)
</action>
<finish_flag>
如果你任务当前任务已经正确按照蓝图进行了拆解，那么请输出 True，否则输出 False。
</finish_flag>
你的最终 outputs 写在这里

## 🔧 可用工具
{tools}

## 🌐 任务上下文信息（动态注入）
你当前观察到的父任务信息为：
{task_context}
"""


RPA_PLAN_PROMPT = """
# 🔄 **当前关键阶段**：`分层任务编排设计阶段`
**阶段核心使命**：
▢ 创建完整的任务层级结构蓝图
▢ 定义每个子任务的信息需求
▢ 标记叶子节点任务（最终执行层）

## ⚠ 阶段任务目标（‼️‼️‼️人工审查点，如若出错，你将会被惩罚）
1. **全局规划责任**
✓ 本阶段必须完成**整个任务树**的顶层设计
✓ 需预见所有潜在子任务层级
✓ 你可以看看自己都有什么工具可以用，这些工具可以帮你完成任务
✓ 将你规划的蓝图及时填入<orchestration>标签中，不要遗漏，规划必须符合格式
⛔ 严令禁止直接回答任务，你只能思考和规划一步步应该怎么做

2. **叶子节点标识规则**  
   ✓ `是否叶子=True` 仅当任务**不再可分**且**可直接执行**
   ✓ 非叶子任务必须包含`子任务`属性
   
3. **节点问题名称规则**
⛔ 严令禁止在节点的问题名称上使用特殊符号或者其他引起解析错误的字符（可能会引发字符串匹配错误）

## 🌰 阶段专属输出格式示例
<think>
# 规划思考
如果你把你得规划蓝图写在这里将会被视为错误，你会收到警告。
⛔这里严令禁止直接回答问题，你只能思考这个问题的关键点是什么。
</think>
<orchestration>
‼️ 注意：任何数学公式都不要出现在标题里（可能引发字符串匹配错误）
‼️ 注意：目标不需要是太细节的步骤，而是关键点。非常细节的步骤你现在不需要考虑。
‼️ 注意：你不需要复述用户的问题和描述，你的所有规划都会被认为是用户的问题和描述的子问题
以下是一个划分成了 **2 层的任务树** 的格式示例，你可以参考这个示例，每一层需要多少子任务你可以自己决定。
- [ ] 目标简短描述 (目标Objective 1，‼️这是第一层子问题，不要直接回答问题）
    - 描述：需求的具体描述，关键产出(KR)是什么，完成标准(CR)是什么，怎么判断是否正确完成（不是细节，而是关键点）
    - 是否叶子：False  // 非叶子任务，需要继续拆解
    - 子任务：
        - [ ] 目标简短描述 (目标Objective 1.1，‼️这是第一层子问题，不要直接回答问题）
            - 描述：需求的具体描述，关键产出(KR)是什么，完成标准(CR)是什么，怎么判断是否正确完成（不是细节，而是关键点）
            - 是否叶子：False  // 非叶子任务，需要继续拆解
            - 子任务：
                - [ ] 目标简短描述 (目标Objective 1.1.1，‼️这是第二层子问题，不要直接回答问题）
                    - 描述：需求的具体描述，关键产出(KR)是什么，完成标准(CR)是什么，怎么判断是否正确完成（不是细节，而是关键点）
                    - 是否叶子：True
                - [ ] 目标简短描述 (目标Objective 1.1.2，‼️这是第二层子问题，不要直接回答问题）
                    - 描述：需求的具体描述，关键产出(KR)是什么，完成标准(CR)是什么，怎么判断是否正确完成（不是细节，而是关键点）
                    - 是否叶子：True
        - [ ] 目标简短描述 (目标Objective 1.2，‼️这是第一层子问题，不要直接回答问题）
            - 描述：需求的具体描述，关键产出(KR)是什么，完成标准(CR)是什么，怎么判断是否正确完成（不是细节，而是关键点）
            - 是否叶子：False  // 非叶子任务，需要继续拆解
            - 子任务：（仅当非叶子时存在）
                - [ ] 目标简短描述 (目标Objective 1.2.1，‼️这是第二层子问题，不要直接回答问题）
                    - 描述：需求的具体描述，关键产出(KR)是什么，完成标准(CR)是什么，怎么判断是否正确完成（不是细节，而是关键点）
                    - 是否叶子：True
                - [ ] 目标简短描述 (目标Objective 1.2.2，‼️这是第二层子问题，不要直接回答问题）
                    - 描述：需求的具体描述，关键产出(KR)是什么，完成标准(CR)是什么，怎么判断是否正确完成（不是细节，而是关键点）
                    - 是否叶子：True
- [ ] 目标简短描述 (目标Objective 2，‼️这是第一层子问题，不要直接回答问题）
    - 描述：需求的具体描述，关键产出(KR)是什么，完成标准(CR)是什么，怎么判断是否正确完成（不是细节，而是关键点）
    - 是否叶子：True  // 叶子任务，不需要继续拆解
</orchestration>
其他输出写在所有的标签之外

## 规划层级限制
对于这个任务，你最多可以拆解到 {detail_level} 层（层指的是层次遍历任务树的层数，如果用户要求的层数越高，则你需要越详细规划）。
超出这个层级的拆解将会被视为错误。

## 🌐 任务上下文信息（动态注入）
你当前观察到的父任务信息为：
{task_context}
"""
